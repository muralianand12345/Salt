import discord from "discord.js";
import { EmbedTemplate } from "../../../utils/embed_template";
import { TicketRepository } from "../../../events/database/repo/ticket_system";
import { createTranscript, ExportReturnType } from "discord-html-transcripts";

export const transcriptTicket = async (
    interaction: discord.ChatInputCommandInteraction,
    client: discord.Client
): Promise<void> => {
    await interaction.deferReply();

    try {
        // Check if the command is being used in a ticket channel
        const ticketRepo = new TicketRepository((client as any).dataSource);
        const ticket = await ticketRepo.getTicketByChannelId(interaction.channelId);

        if (!ticket) {
            await interaction.editReply({
                embeds: [new EmbedTemplate(client).error("This is not a valid ticket channel.")]
            });
            return;
        }

        // Get the target user (if specified)
        const targetUser = interaction.options.getUser("user");

        // Create status message
        await interaction.editReply({
            embeds: [
                new discord.EmbedBuilder()
                    .setTitle("📝 Generating Transcript")
                    .setDescription("Please wait while I generate the transcript...")
                    .setColor("Blue")
            ]
        });

        // Get the channel
        const channel = interaction.channel as discord.TextChannel;

        // Get creator user
        const creator = await client.users.fetch(ticket.creatorId).catch(() => null);

        // Create the transcript
        const attachment = await createTranscript(channel, {
            limit: 10000, // Limit of messages to fetch
            saveImages: true,
            poweredBy: false,
            filename: `ticket-${ticket.ticketNumber}.html`,
        }) as AttachmentBuffer;

        // Create an embed for the transcript
        const embed = new discord.EmbedBuilder()
            .setTitle(`Ticket #${ticket.ticketNumber} Transcript`)
            .setDescription(`
**Ticket Information**
**User:** ${creator ? creator.tag : 'Unknown'} (${ticket.creatorId})
**Ticket Number:** ${ticket.ticketNumber}
**Category:** ${ticket.category?.name || 'Unknown'}
**Status:** ${ticket.status.toUpperCase()}
**Created:** <t:${Math.floor(new Date(ticket.createdAt).getTime() / 1000)}:F>
            `)
            .setColor("#2F3136")
            .setFooter({ text: 'Transcript generated on request', iconURL: client.user?.displayAvatarURL() })
            .setTimestamp();

        // If sending to a specific user
        if (targetUser) {
            try {
                // Send to the specified user
                await targetUser.send({
                    embeds: [
                        embed.setDescription(`
**Ticket Information**
Transcript from **${interaction.guild?.name}**
**Ticket Number:** ${ticket.ticketNumber}
**Category:** ${ticket.category?.name || 'Unknown'}
**Generated by:** ${interaction.user.tag}
                        `)
                    ],
                    files: [attachment]
                });

                // Confirm to the user who requested
                await interaction.editReply({
                    embeds: [
                        new EmbedTemplate(client).success("Transcript sent successfully!")
                            .setDescription(`A transcript of this ticket has been sent to ${targetUser}.`)
                    ]
                });
            } catch (error) {
                client.logger.error(`[TICKET_TRANSCRIPT] Failed to DM transcript: ${error}`);

                // Fall back to sending in the channel
                await interaction.editReply({
                    embeds: [
                        new EmbedTemplate(client).warning(`Could not send transcript to ${targetUser}. Their DMs may be closed.`)
                            .setDescription("The transcript will be attached to this message instead.")
                    ],
                    files: [attachment]
                });
            }
        } else {
            // Send in the current channel
            await interaction.editReply({
                embeds: [
                    new EmbedTemplate(client).success("Transcript generated successfully!")
                ],
                files: [attachment]
            });
        }
    } catch (error) {
        client.logger.error(`[TICKET_TRANSCRIPT] Error generating transcript: ${error}`);
        await interaction.editReply({
            embeds: [new EmbedTemplate(client).error("An error occurred while generating the transcript.")]
        });
    }
};

// Define the interface for the attachment buffer
interface AttachmentBuffer extends discord.AttachmentBuilder {
    attachment: Buffer;
}